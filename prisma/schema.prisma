// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Permission {
    id             String           @id @default(cuid())
    name           String
    description    String?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @default(now()) @updatedAt
    RolePermission RolePermission[]
}

model Role {
    id             String           @id @default(cuid())
    name           String
    description    String?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @default(now()) @updatedAt
    RolePermission RolePermission[]
    BoardUser      BoardUser[]
}

model RolePermission {
    id           String     @id @default(cuid())
    roleId       String
    permissionId String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @default(now()) @updatedAt
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    @@unique([roleId, permissionId])
}

model BoardSnapshot {
    id        String   @id @default(cuid())
    boardId   String
    state     Json
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    board     Board    @relation(fields: [boardId], references: [id])
}

enum BoardType {
    PUBLIC
    PRIVATE
}

model Board {
    id            String          @id @default(cuid())
    name          String
    type          BoardType // public, private
    description   String?
    state         Json
    isEnabled     Boolean
    ownerId       String // TODO(David): add the ability to make a team the owner of a board
    owner         User            @relation(fields: [ownerId], references: [id]) // TODO(David): add the ability to make a team the owner of a board
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @default(now()) @updatedAt
    BoardSnapshot BoardSnapshot[]
    BoardUser     BoardUser[]
}

model BoardUser {
    id        String   @id @default(cuid())
    boardId   String
    userId    String
    roleId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    board     Board    @relation(fields: [boardId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    role      Role     @relation(fields: [roleId], references: [id])

    @@unique([boardId, userId])
}

// Necessary for Next auth
model Account {
    id                       String   @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @default(now()) @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String?
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @default(now()) @updatedAt
    Board         Board[]
    BoardUser     BoardUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum InvitedUserScope {
    BOARD
    TEAM
}

model InvitedUser {
    id         String           @id @default(cuid())
    email      String
    token      String
    roleId     String
    scope      InvitedUserScope
    scopeId    String
    status     String
    acceptedAt DateTime?
    isEnabled  Boolean
    createdAt  DateTime         @default(now())
    updatedAt  DateTime         @default(now()) @updatedAt

    @@unique([email, scope, scopeId])
}
